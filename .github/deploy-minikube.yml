name: Java CI/CD to Minikube

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: "DemoApp"
      RELEASE: "1.0.0"
      DOCKER_USER: "tricarobert"
      IMAGE_NAME: "tricarobert/demoapp"
      BRANCH: "main"
      REPO_URL: "https://github.com/Robert-Mihai-Trica/DemoApp.git"
      DEPLOYMENT_YAML: "k8s/deployment.yaml"

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üîç Run tests with Maven
        run: |
          mvn clean package
          mvn test

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: üîß Start Minikube
        uses: medyagh/setup-minikube@v0.0.14
        with:
          driver: docker

      - name: üîÑ Build and tag Docker image
        run: |
          IMAGE_TAG="${{ env.RELEASE }}-${{ github.run_number }}"
          docker build -t ${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker tag ${{ env.IMAGE_NAME }}:$IMAGE_TAG ${{ env.IMAGE_NAME }}:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: üîç SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_QUBE_TOKEN }}
        run: |
          mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN

      - name: üöÄ Load image into Minikube
        run: |
          minikube image load ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          minikube image load ${{ env.IMAGE_NAME }}:latest

      - name: üì¶ Deploy to Minikube
        run: kubectl apply -f ${{ env.DEPLOYMENT_YAML }}

      - name: üîç Trivy Scan for vulnerabilities
        run: |
          docker run --rm -v $(pwd):/workspace -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table

      - name: ‚úÖ Verify deployment
        run: kubectl get pods

      - name: üßπ Cleanup Docker images
        run: |
          docker rmi ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || echo "Image not found"
          docker rmi ${{ env.IMAGE_NAME }}:latest || echo "Image not found"

    notifications:
      if: failure()
      run: echo "Build failed, sending email notification"
